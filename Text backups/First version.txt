/*Headers*/
#include <string.h>
#include <stdio.h>
#include "gtk/gtk.h"
#include "glib.h"
#include "glib-object.h"
#include "gio/gio.h"
#include "gdk/gdkkeysyms.h"
/*Shared objects*/
GtkWidget *window;
GtkAccelGroup * accel_group;
GtkVBox * vbox;
GtkTextView * textview;
gchar path[256];
gboolean isChanged;
/*Signal handlers*/
void underConstruct();
void fileNewMenuItemActivated(GtkWidget * widget, gpointer data);
void fileOpenMenuItemActivated(GtkWidget * widget, gpointer data);
void fileRandomMenuItemActivated(GtkWidget * widget, gpointer data);
void fileSaveMenuItemActivated(GtkWidget * widget, gpointer data);
void fileSaveAsMenuItemActivated(GtkWidget * widget, gpointer data);
void fileQuitMenuItemActivated(GtkWidget * widget, gpointer data);
void helpAboutMenuItemActivated(GtkWidget * widget, gpointer data);
void bufferChanged(GtkWidget * widget, gpointer data);
/*Init graphics and connections*/
void initMenuBar();
void initToolBar();
void initTextEditor();
int main(int argc, char *argv[])
{
gtk_init(&argc,&argv);
window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
gtk_window_set_title(GTK_WINDOW(window),"Simple editor!");
gtk_window_set_position(GTK_WINDOW(window), GTK_WIN_POS_CENTER);
gtk_window_set_default_size(GTK_WINDOW(window), 500, 400);
gtk_signal_connect(GTK_WINDOW(window),"destroy",gtk_main_quit,NULL);
accel_group = gtk_accel_group_new();
gtk_window_add_accel_group(GTK_WINDOW(window), accel_group);
vbox = gtk_vbox_new(FALSE,2);
gtk_container_add(GTK_WINDOW(window),vbox);
gtk_widget_show(vbox);
initMenuBar();
initToolBar();
initTextEditor();
gtk_widget_show(window);
gtk_main();
return 0;
}
void initMenuBar()
{
GtkMenuBar * menubar = gtk_menu_bar_new();
gtk_box_pack_start(vbox,menubar,FALSE,FALSE,2);
GtkMenuItem * fileMenuItem = gtk_menu_item_new_with_mnemonic("_File");
gtk_menu_shell_append(menubar,fileMenuItem);
GtkMenu * fileMenu = gtk_menu_new();
gtk_menu_item_set_submenu(fileMenuItem,fileMenu);
GtkImageMenuItem * fileNewMenuItem = gtk_image_menu_item_new_from_stock(GTK_STOCK_NEW,NULL);
gtk_menu_shell_append(fileMenu,fileNewMenuItem);
g_signal_connect(fileNewMenuItem,"activate",fileNewMenuItemActivated,NULL);
GtkImageMenuItem * fileOpenMenuItem = gtk_image_menu_item_new_from_stock(GTK_STOCK_OPEN,NULL);
gtk_menu_shell_append(fileMenu,fileOpenMenuItem);
g_signal_connect(fileOpenMenuItem,"activate",fileOpenMenuItemActivated,NULL);
GtkImageMenuItem * fileRandomMenuItem = gtk_image_menu_item_new_from_stock(GTK_STOCK_NEW,NULL);
gtk_menu_shell_append(fileMenu,fileRandomMenuItem);
g_signal_connect(fileNewMenuItem,"activate",fileRandomMenuItemActivated,NULL);
GtkMenuItem * sepItem = gtk_separator_menu_item_new();
gtk_menu_shell_append(fileMenu,sepItem);
GtkImageMenuItem * fileSaveMenuItem = gtk_image_menu_item_new_from_stock(GTK_STOCK_SAVE,NULL);
gtk_menu_shell_append(fileMenu,fileSaveMenuItem);
g_signal_connect(fileSaveMenuItem,"activate",fileSaveMenuItemActivated,NULL);
GtkImageMenuItem * fileSaveAsMenuItem = gtk_image_menu_item_new_from_stock(GTK_STOCK_SAVE_AS,NULL);
gtk_menu_shell_append(fileMenu,fileSaveAsMenuItem);
g_signal_connect(fileSaveAsMenuItem,"activate",fileSaveAsMenuItemActivated,NULL);
sepItem = gtk_separator_menu_item_new();
gtk_menu_shell_append(fileMenu,sepItem);
GtkImageMenuItem * fileQuitMenuItem = gtk_image_menu_item_new_from_stock(GTK_STOCK_QUIT,accel_group);
gtk_menu_shell_append(fileMenu,fileQuitMenuItem);
g_signal_connect(fileQuitMenuItem,"activate",fileQuitMenuItemActivated,NULL);
gtk_widget_add_accelerator(fileQuitMenuItem,"activate",accel_group,GDK_q,
GDK_CONTROL_MASK,GTK_ACCEL_VISIBLE);
GtkMenuItem * editMenuItem = gtk_menu_item_new_with_mnemonic("_Edit");
gtk_menu_shell_append(menubar,editMenuItem);
GtkMenu * editMenu = gtk_menu_new();
gtk_menu_item_set_submenu(editMenuItem,editMenu);
GtkMenuItem * editFindMenuItem = gtk_menu_item_new_with_mnemonic("_Find");
gtk_menu_shell_append(editMenu,editFindMenuItem);
g_signal_connect(editFindMenuItem,"activate",editFindMenuItemActivated,NULL);
gtk_widget_add_accelerator(editFindMenuItem,"activate",accel_group,GDK_f,
GDK_CONTROL_MASK,GTK_ACCEL_VISIBLE);
GtkMenuItem * helpMenuItem = gtk_menu_item_new_with_mnemonic("_Help");
gtk_menu_shell_append(menubar,helpMenuItem);
GtkMenu * helpMenu = gtk_menu_new();
gtk_menu_item_set_submenu(helpMenuItem,helpMenu);
GtkMenuItem * helpAboutMenuItem = gtk_menu_item_new_with_mnemonic("_About");
gtk_menu_shell_append(helpMenu,helpAboutMenuItem);
g_signal_connect(helpAboutMenuItem,"activate",helpAboutMenuItemActivated,NULL);
}
void initToolBar()
{
GtkToolbar * toolbar = gtk_toolbar_new();
gtk_box_pack_start(vbox,toolbar,FALSE,FALSE,2);
GtkToolButton * toolbarSave = gtk_tool_button_new_from_stock(GTK_STOCK_NEW);
gtk_toolbar_append_widget(toolbar,toolbarSave,"New","New file");
g_signal_connect(toolbarSave,"clicked",fileNewMenuItemActivated,NULL);
GtkToolButton * toolbarOpen = gtk_tool_button_new_from_stock(GTK_STOCK_OPEN);
gtk_toolbar_append_widget(toolbar,toolbarOpen,"Open","Open file");
g_signal_connect(toolbarOpen,"clicked",fileOpenMenuItemActivated,NULL);
GtkToolButton * toolbarRandom = gtk_tool_button_new_from_stock(GTK_STOCK_OPEN);
gtk_toolbar_append_widget(toolbar,toolbarRandom,"Random","Random");
g_signal_connect(toolbarRandom,"clicked",fileRandomMenuItemActivated,NULL);
}
void initTextEditor()
{
textview = gtk_text_view_new();
gtk_box_pack_start(vbox,textview,TRUE,TRUE,2);
gtk_text_view_set_left_margin(textview,10);
gtk_text_view_set_right_margin(textview,10);
gtk_text_view_set_wrap_mode(textview,GTK_WRAP_WORD_CHAR);
GtkTextBuffer *buffer = gtk_text_view_get_buffer(textview);
g_signal_connect(buffer,"changed",bufferChanged,NULL);
gtk_text_buffer_set_text(buffer,"",-1);
strcpy(path,"");
isChanged = FALSE;
}
void fileNewMenuItemActivated(GtkWidget * widget, gpointer data)
{
if(isChanged)
{
GtkMessageDialog *mDialog =gtk_message_dialog_new(window,GTK_DIALOG_MODAL,GTK_MESSAGE_QUESTION,G
TK_BUTTONS_YES_NO,"Do you want to save the current file?");
gint res = gtk_dialog_run(mDialog);
gtk_widget_destroy (mDialog);
if(res == GTK_RESPONSE_YES)
fileSaveMenuItemActivated(widget, data);
}
GtkTextBuffer *buffer = gtk_text_view_get_buffer(textview);
gtk_text_buffer_set_text(buffer,"",-1);
isChanged = FALSE;
strcpy(path,"");
}
void fileOpenMenuItemActivated(GtkWidget * widget, gpointer data)
{
GtkFileChooserDialog * fDialog = gtk_file_chooser_dialog_new("Choosefile",window,GTK_FILE_CHOOSER_ACTION_OPEN, GTK_STOCK_CANCEL ,GTK_RESPONSE_CANCEL, GTK_STOCK_OPEN, GTK_RESPONSE_ACCEPT,NULL);
gint res = gtk_dialog_run(fDialog);
gchar * filename = gtk_file_chooser_get_filename(fDialog);
gtk_widget_destroy (fDialog);
if(res != GTK_RESPONSE_ACCEPT)
return;
fileNewMenuItemActivated(widget,data);
gchar * content;
if(g_file_get_contents(filename,&content,NULL,NULL))
{
GtkTextBuffer *buffer = gtk_text_view_get_buffer(textview);
gtk_text_buffer_set_text(buffer,content,-1);
isChanged = FALSE;
strcpy(path,filename);
g_free(content);
}
else
{
GtkMessageDialog *mDialog =gtk_message_dialog_new(window,GTK_DIALOG_MODAL,GTK_MESSAGE_ERROR,GTK_BUTTONS_OK,"File does not exist.");
gtk_dialog_run(mDialog);
gtk_widget_destroy (mDialog);
}
g_free(filename);
}
void fileSaveMenuItemActivated(GtkWidget * widget, gpointer data)
{
if(strcmp(path,"") == 0)
fileSaveAsMenuItemActivated(widget,data);
else
{
GtkTextBuffer *buffer = gtk_text_view_get_buffer(textview);
GtkTextIter start,end;
gtk_text_buffer_get_start_iter(buffer,&start);
gtk_text_buffer_get_end_iter(buffer,&end);
gchar * contents = gtk_text_buffer_get_text(buffer,&start,&end,FALSE);
if(g_file_set_contents(path,contents,-1,NULL))
isChanged = FALSE;
g_free(contents);
}
fileRandomMenuItemActivated(GtkWidget *widget , gpointer *data)
{
                                      
                                      
                                      
//......................                                      
                                      
                                      
                                      
                                      
                                      
}
}
void fileSaveAsMenuItemActivated(GtkWidget * widget, gpointer data)
{
GtkFileChooserDialog * fDialog = gtk_file_chooser_dialog_new("Save fileas",window,GTK_FILE_CHOOSER_ACTION_SAVE, GTK_STOCK_CANCEL ,GTK_RESPONSE_CANCEL, GTK_STOCK_SAVE, GTK_RESPONSE_ACCEPT,NULL);
gtk_file_chooser_set_do_overwrite_confirmation(fDialog, TRUE);
gint res = gtk_dialog_run(fDialog);
gchar * filename = gtk_file_chooser_get_filename(fDialog);
gtk_widget_destroy (fDialog);
if(res != GTK_RESPONSE_ACCEPT)
return;
strcpy(path,filename);
g_free(filename);
fileSaveMenuItemActivated(widget,data);
}
void fileQuitMenuItemActivated(GtkWidget * widget, gpointer data)
{
fileNewMenuItemActivated(widget,data);
gtk_main_quit();
}
void helpAboutMenuItemActivated(GtkWidget * widget, gpointer data)
{
GtkAboutDialog * aDialog = gtk_about_dialog_new();
gtk_about_dialog_set_program_name(aDialog,"First Project");
gtk_about_dialog_set_version(aDialog,"1.0");
gtk_about_dialog_set_comments(aDialog,"You can sort your data with this program , thanks to mr.shamsaie's sample editor.");
gchar **authors[2] = {"Hadi Modares","Vahid Geraee nejad"};
gtk_about_dialog_set_authors(aDialog,authors);
gtk_dialog_run(aDialog);
gtk_widget_destroy (aDialog);
}
void bufferChanged(GtkWidget * widget, gpointer data)
{
isChanged = TRUE;
}
